from more_itertools import unzip
from pathlib import Path
from snakemake.utils import min_version, validate

min_version("6.12")


configfile: "config/static.yml"
configfile: "config/dynamic.yml"


def validate_interactions(config):
    def assert_1(run_name, feature_list, feature):
        assert (
            feature in feature_list
        ), f"Interaction {feature} not found in feature set for run {run_name}"

    def assert_N(run_name, feature_list, ints):
        for i in ints:
            assert_1(run_name, feature_list, i)

    for run_name, run_values in config["ebm_runs"].items():
        if "interactions" in run_values:
            interactions = run_values["interactions"]
            if isinstance(interactions, list):
                for i in interactions:
                    (assert_N if isinstance(i, list) else assert_1)(
                        run_name, [*run_values["features"]], i
                    )


def validate_inputs(config):
    inputs = set(config["inputs"])
    for k, v in config["ebm_runs"].items():
        assert set(j for i in v["inputs"] for j in i) <= inputs, (
            "Run config %s contains invalid input keys" % k
        )


validate(config, "schemas/config-schema.yml")
validate_inputs(config)
validate_interactions(config)


################################################################################
# paths

# this is necessary as envs are apparently resolved locally in each rule file
envs_dir = Path("workflow/envs").resolve()
scripts_dir = Path("workflow/scripts").resolve()

conf_paths = config["paths"]
resources_dir = Path(conf_paths["resources"])
results_dir = Path(conf_paths["results"])

################################################################################
# import subworkflows


include: "rules/annotations/get_annotations.smk"
include: "rules/labels/get_labels.smk"
include: "rules/run_ebm.smk"


################################################################################
# main target


rule all:
    input:
        rules.all_summary.input,
        rules.all_ebm.input,
